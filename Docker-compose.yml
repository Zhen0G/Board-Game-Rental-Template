services:
  user-db:
    image: postgres
    environment:
      POSTGRES_DB: users_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      retries: 5

  order-db:
    image: postgres
    environment:
      POSTGRES_DB: orders_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      retries: 5

  product-db:
    image: mongo
    networks:
      - microservices-network

  user-service:
    build: ./user-service
    ports:
      - "5001:5001"
    depends_on:
      user-db:
        condition: service_healthy  # Ensures database is ready before starting
    networks:
      - microservices-network

  product-service:
    build: ./product-service
    ports:
      - "5002:5002"
    networks:
      - microservices-network

  order-service:
    build: ./order-service
    ports:
      - "5003:5003"
    depends_on:
      order-db:
        condition: service_healthy  # Ensures database is ready before starting
    networks:
      - microservices-network

  frontend-service:
    build: ./frontend-service
    ports:
      - "9000:9000"
    depends_on:
      - user-service
      - product-service
      - order-service
    networks:
      - microservices-network

networks:
  microservices-network:
    driver: bridge
